/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var g=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var P=(n,e)=>{for(var t in e)g(n,t,{get:e[t],enumerable:!0})},E=(n,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of w(e))!S.call(n,r)&&r!==t&&g(n,r,{get:()=>e[r],enumerable:!(i=M(e,r))||i.enumerable});return n};var y=n=>E(g({},"__esModule",{value:!0}),n);var b={};P(b,{default:()=>o});module.exports=y(b);var s=require("obsidian"),R={rootDir:"Projects",attributeName:"folder"},d=class{constructor(e){this.settings=e}isMarkdownFile(e){return e.extension==="md"}isInRootDir(e){let t=this.normalizePath(this.settings.rootDir),i=e.path;return i.startsWith(`${t}/`)||i===t}getRelativeFolderPath(e){let t=this.normalizePath(this.settings.rootDir),i=e.path.split("/");return i.pop(),i.length>0&&i[0]===t&&i.shift(),i.join("/")}normalizePath(e){return e.replace(/\\/g,"/")}},p=class{constructor(){this.frontMatterRegex=/^---\n([\s\S]*?)\n---\n?/}updateFrontMatter(e,t,i){let r=e.match(this.frontMatterRegex);return r?this.updateExistingFrontMatter(e,r,t,i):this.createNewFrontMatter(e,t,i)}updateExistingFrontMatter(e,t,i,r){let l=t[1].split(`
`),a=this.createFrontMatterLine(i,r),v=!1,c=!1,F=l.map(f=>{let[h,...m]=f.split(":");return(h==null?void 0:h.trim().toLowerCase())===i.toLowerCase()&&(v=!0,m.join(":").trim().replace(/^"|"$/g,"")!==r)?(c=!0,a):f});return v||(F.push(a),c=!0),c?{content:e.replace(this.frontMatterRegex,`---
${F.join(`
`)}
---
`),changed:!0}:{content:e,changed:!1}}createNewFrontMatter(e,t,i){return{content:`---
${this.createFrontMatterLine(t,i)}
---
${e}`,changed:!0}}createFrontMatterLine(e,t){return`${e}: "${t}"`}},u=class extends s.PluginSettingTab{constructor(t,i){super(t,i);this.plugin=i}display(){let{containerEl:t}=this;t.empty(),this.createHeader(),this.createRootDirSetting(),this.createAttributeNameSetting()}createHeader(){this.containerEl.createEl("h2",{text:"Folder Front Matter Settings"})}createRootDirSetting(){new s.Setting(this.containerEl).setName("Root Directory").setDesc("Only files below this directory will get the front matter attribute.").addText(t=>t.setValue(this.plugin.settings.rootDir).onChange(async i=>{this.plugin.settings.rootDir=i.trim(),await this.plugin.saveSettings()}))}createAttributeNameSetting(){new s.Setting(this.containerEl).setName("Front Matter Attribute Name").setDesc("The key name to insert into the front matter (e.g. 'folder').").addText(t=>t.setValue(this.plugin.settings.attributeName).onChange(async i=>{this.plugin.settings.attributeName=i.trim()||"folder",await this.plugin.saveSettings()}))}},o=class extends s.Plugin{async onload(){console.log("Loading Folder Front Matter plugin..."),await this.loadSettings(),console.log("Settings loaded:",this.settings),this.initializeServices(),this.registerSettingsTab(),this.registerEventHandlers(),this.registerCommands(),this.processExistingFiles(),console.log("Folder Front Matter plugin loaded successfully.")}initializeServices(){this.fileProcessor=new d(this.settings),this.frontMatterService=new p}registerSettingsTab(){this.addSettingTab(new u(this.app,this))}registerEventHandlers(){this.registerFileEvents()}registerFileEvents(){this.registerEvent(this.app.vault.on("create",t=>{t instanceof s.TFile&&this.handleFileEvent(t)})),this.registerEvent(this.app.vault.on("modify",t=>{t instanceof s.TFile&&this.handleFileEvent(t)})),this.registerEvent(this.app.vault.on("rename",(t,i)=>{t instanceof s.TFile&&this.handleFileEvent(t)}))}registerCommands(){this.addCommand({id:"update-all-folder-frontmatter",name:"Update All Folder Frontmatter",callback:async()=>{await this.updateAllRelevantFiles(),new s.Notice("All relevant files updated with folder front matter.")}})}processExistingFiles(){this.app.workspace.onLayoutReady(()=>{this.updateAllRelevantFiles().catch(console.error)})}async loadSettings(){this.settings=Object.assign({},R,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async updateAllRelevantFiles(){let i=this.app.vault.getMarkdownFiles().filter(r=>this.fileProcessor.isInRootDir(r));await Promise.all(i.map(r=>this.ensureFolderFrontMatter(r)))}async handleFileEvent(t){this.shouldProcessFile(t)&&(console.log(`Processing: ${t.path} (folder: ${this.fileProcessor.getRelativeFolderPath(t)})`),await this.ensureFolderFrontMatter(t))}shouldProcessFile(t){return this.fileProcessor.isMarkdownFile(t)&&this.fileProcessor.isInRootDir(t)}async ensureFolderFrontMatter(t){let i=this.fileProcessor.getRelativeFolderPath(t),r=await this.app.vault.read(t),{content:l,changed:a}=this.frontMatterService.updateFrontMatter(r,this.settings.attributeName,i);a&&(await this.app.vault.modify(t,l),console.log(`Updated front matter for ${t.path} [${this.settings.attributeName}: "${i}"]`))}};
