/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var E=(s,i)=>{for(var t in i)h(s,t,{get:i[t],enumerable:!0})},P=(s,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let r of M(i))!S.call(s,r)&&r!==t&&h(s,r,{get:()=>i[r],enumerable:!(e=w(i,r))||e.enumerable});return s};var b=s=>P(h({},"__esModule",{value:!0}),s);var R={};E(R,{default:()=>o});module.exports=b(R);var n=require("obsidian"),y={rootDir:"Projects",attributeName:"folder"},d=class{constructor(i){this.settings=i}isMarkdownFile(i){return i.extension==="md"}isInRootDir(i){let t=this.normalizePath(this.settings.rootDir),e=i.path;return e.startsWith(`${t}/`)||e===t}getRelativeFolderPath(i){let t=this.normalizePath(this.settings.rootDir),e=i.path.split("/");return e.pop(),e.length>0&&e[0]===t&&e.shift(),e.join("/")}normalizePath(i){return i.replace(/\\/g,"/")}},p=class{constructor(){this.frontMatterRegex=/^---\n([\s\S]*?)\n---\n?/}updateFrontMatter(i,t,e){let r=i.match(this.frontMatterRegex);return r?this.updateExistingFrontMatter(i,r,t,e):this.createNewFrontMatter(i,t,e)}updateExistingFrontMatter(i,t,e,r){let l=t[1].split(`
`),a=this.createFrontMatterLine(e,r),v=!1,g=!1,F=l.map(f=>{let[c,...m]=f.split(":");return(c==null?void 0:c.trim().toLowerCase())===e.toLowerCase()&&(v=!0,m.join(":").trim().replace(/^"|"$/g,"")!==r)?(g=!0,a):f});return v||(F.push(a),g=!0),g?{content:i.replace(this.frontMatterRegex,`---
${F.join(`
`)}
---
`),changed:!0}:{content:i,changed:!1}}createNewFrontMatter(i,t,e){return{content:`---
${this.createFrontMatterLine(t,e)}
---
${i}`,changed:!0}}createFrontMatterLine(i,t){return`${i}: "${t}"`}},u=class extends n.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),this.createHeader(),this.createRootDirSetting(),this.createAttributeNameSetting()}createHeader(){this.containerEl.createEl("h2",{text:"Folder Front Matter Settings"})}createRootDirSetting(){new n.Setting(this.containerEl).setName("Root Directory").setDesc("Only files below this directory will get the front matter attribute.").addText(t=>t.setValue(this.plugin.settings.rootDir).onChange(async e=>{this.plugin.settings.rootDir=e.trim(),await this.plugin.saveSettings()}))}createAttributeNameSetting(){new n.Setting(this.containerEl).setName("Front Matter Attribute Name").setDesc("The key name to insert into the front matter (e.g. 'folder').").addText(t=>t.setValue(this.plugin.settings.attributeName).onChange(async e=>{this.plugin.settings.attributeName=e.trim()||"folder",await this.plugin.saveSettings()}))}},o=class extends n.Plugin{async onload(){console.log("Loading Folder Front Matter plugin..."),await this.loadSettings(),console.log("Settings loaded:",this.settings),this.initializeServices(),this.registerSettingsTab(),this.registerEventHandlers(),this.registerCommands(),this.processExistingFiles(),console.log("Folder Front Matter plugin loaded successfully.")}initializeServices(){this.fileProcessor=new d(this.settings),this.frontMatterService=new p}registerSettingsTab(){this.addSettingTab(new u(this.app,this))}registerEventHandlers(){this.registerFileEvents()}registerFileEvents(){this.registerEvent(this.app.vault.on("create",t=>{t instanceof n.TFile&&this.handleFileEvent(t)})),this.registerEvent(this.app.vault.on("modify",t=>{t instanceof n.TFile&&this.handleFileEvent(t)})),this.registerEvent(this.app.vault.on("rename",(t,e)=>{t instanceof n.TFile&&this.handleFileEvent(t)}))}registerCommands(){this.addCommand({id:"update-all-folder-frontmatter",name:"Update All Folder Frontmatter",callback:async()=>{await this.updateAllRelevantFiles(),new n.Notice("All relevant files updated with folder front matter.")}})}processExistingFiles(){this.app.workspace.onLayoutReady(()=>{this.updateAllRelevantFiles().catch(console.error)})}async loadSettings(){this.settings=Object.assign({},y,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async updateAllRelevantFiles(){let e=this.app.vault.getMarkdownFiles().filter(r=>this.fileProcessor.isInRootDir(r));await Promise.all(e.map(r=>this.ensureFolderFrontMatter(r)))}async handleFileEvent(t){if(console.log(`File event triggered for: ${t.path}`),!this.shouldProcessFile(t)){console.log(`Skipping file ${t.path} - not eligible for processing`);return}console.log(`Processing front matter for: ${t.path}`),await this.ensureFolderFrontMatter(t)}shouldProcessFile(t){return this.fileProcessor.isMarkdownFile(t)&&this.fileProcessor.isInRootDir(t)}async ensureFolderFrontMatter(t){let e=this.fileProcessor.getRelativeFolderPath(t);console.log(`Calculated relative folder path: "${e}" for file: ${t.path}`);let r=await this.app.vault.read(t),{content:l,changed:a}=this.frontMatterService.updateFrontMatter(r,this.settings.attributeName,e);a&&(console.log(`Updating front matter for ${t.path} with ${this.settings.attributeName}: "${e}"`),await this.app.vault.modify(t,l))}};
