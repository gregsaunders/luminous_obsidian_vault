/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var g=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var E=(n,r)=>{for(var t in r)g(n,t,{get:r[t],enumerable:!0})},S=(n,r,t,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of M(r))!y.call(n,i)&&i!==t&&g(n,i,{get:()=>r[i],enumerable:!(e=w(r,i))||e.enumerable});return n};var P=n=>S(g({},"__esModule",{value:!0}),n);var b={};E(b,{default:()=>o});module.exports=P(b);var s=require("obsidian"),R={rootDir:"Projects",attributeName:"folder"},d=class{constructor(r){this.settings=r}isMarkdownFile(r){return r.extension==="md"}isInRootDir(r){let t=this.normalizePath(this.settings.rootDir),e=r.path;return e.startsWith(`${t}/`)||e===t}getRelativeFolderPath(r){let t=this.normalizePath(this.settings.rootDir),e=r.path.split("/");return e.pop(),e.length>0&&e[0]===t&&e.shift(),e.join("/")}normalizePath(r){return r.replace(/\\/g,"/")}},p=class{constructor(){this.frontMatterRegex=/^---\n([\s\S]*?)\n---\n?/}updateFrontMatter(r,t,e){let i=r.match(this.frontMatterRegex);return i?this.updateExistingFrontMatter(r,i,t,e):this.createNewFrontMatter(r,t,e)}updateExistingFrontMatter(r,t,e,i){let l=t[1].split(`
`),a=this.createFrontMatterLine(e,i),v=!1,c=!1,F=l.map(m=>{let[h,...f]=m.split(":");return(h==null?void 0:h.trim().toLowerCase())===e.toLowerCase()&&(v=!0,f.join(":").trim().replace(/^"|"$/g,"")!==i)?(c=!0,a):m});return v||(F.push(a),c=!0),c?{content:r.replace(this.frontMatterRegex,`---
${F.join(`
`)}
---
`),changed:!0}:{content:r,changed:!1}}createNewFrontMatter(r,t,e){return{content:`---
${this.createFrontMatterLine(t,e)}
---
${r}`,changed:!0}}createFrontMatterLine(r,t){return`${r}: "${t}"`}},u=class extends s.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),this.createHeader(),this.createRootDirSetting(),this.createAttributeNameSetting()}createHeader(){this.containerEl.createEl("h2",{text:"Folder Front Matter Settings"})}createRootDirSetting(){new s.Setting(this.containerEl).setName("Root Directory").setDesc("Only files below this directory will get the front matter attribute.").addText(t=>t.setValue(this.plugin.settings.rootDir).onChange(async e=>{this.plugin.settings.rootDir=e.trim(),await this.plugin.saveSettings()}))}createAttributeNameSetting(){new s.Setting(this.containerEl).setName("Front Matter Attribute Name").setDesc("The key name to insert into the front matter (e.g. 'folder').").addText(t=>t.setValue(this.plugin.settings.attributeName).onChange(async e=>{this.plugin.settings.attributeName=e.trim()||"folder",await this.plugin.saveSettings()}))}},o=class extends s.Plugin{async onload(){console.log("Loading Folder Front Matter plugin..."),await this.loadSettings(),console.log("Settings loaded:",this.settings),this.initializeServices(),this.registerSettingsTab(),this.registerEventHandlers(),this.registerCommands(),this.processExistingFiles(),console.log("Folder Front Matter plugin loaded successfully.")}initializeServices(){this.fileProcessor=new d(this.settings),this.frontMatterService=new p}registerSettingsTab(){this.addSettingTab(new u(this.app,this))}registerEventHandlers(){this.registerFileEvents()}registerFileEvents(){this.registerEvent(this.app.vault.on("create",async t=>{try{t instanceof s.TFile&&(await new Promise(e=>setTimeout(e,100)),await this.handleFileEvent(t))}catch(e){console.error(`Error handling create event for ${t.path}:`,e)}})),this.registerEvent(this.app.vault.on("modify",async t=>{try{t instanceof s.TFile&&await this.handleFileEvent(t)}catch(e){console.error(`Error handling modify event for ${t.path}:`,e)}})),this.registerEvent(this.app.vault.on("rename",async(t,e)=>{try{t instanceof s.TFile&&(await new Promise(i=>setTimeout(i,100)),await this.handleFileEvent(t))}catch(i){console.error(`Error handling rename event for ${t.path}:`,i)}}))}registerCommands(){this.addCommand({id:"update-all-folder-frontmatter",name:"Update All Folder Frontmatter",callback:async()=>{await this.updateAllRelevantFiles(),new s.Notice("All relevant files updated with folder front matter.")}})}processExistingFiles(){this.app.workspace.onLayoutReady(()=>{this.updateAllRelevantFiles().catch(console.error)})}async loadSettings(){this.settings=Object.assign({},R,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async updateAllRelevantFiles(){let e=this.app.vault.getMarkdownFiles().filter(i=>this.fileProcessor.isInRootDir(i));await Promise.all(e.map(i=>this.ensureFolderFrontMatter(i)))}async handleFileEvent(t){this.shouldProcessFile(t)&&(console.log(`Processing: ${t.path} (folder: ${this.fileProcessor.getRelativeFolderPath(t)})`),await this.ensureFolderFrontMatter(t))}shouldProcessFile(t){return this.fileProcessor.isMarkdownFile(t)&&this.fileProcessor.isInRootDir(t)}async ensureFolderFrontMatter(t){try{if(!await this.app.vault.adapter.exists(t.path)){console.log(`File no longer exists: ${t.path}`);return}let e=this.fileProcessor.getRelativeFolderPath(t),i=await this.app.vault.read(t),{content:l,changed:a}=this.frontMatterService.updateFrontMatter(i,this.settings.attributeName,e);a&&await this.app.vault.adapter.exists(t.path)&&(await this.app.vault.modify(t,l),console.log(`Updated front matter for ${t.path} [${this.settings.attributeName}: "${e}"]`))}catch(e){console.error(`Error processing front matter for ${t.path}:`,e)}}};
