/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var p=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var S=(s,a)=>{for(var t in a)p(s,t,{get:a[t],enumerable:!0})},T=(s,a,t,e)=>{if(a&&typeof a=="object"||typeof a=="function")for(let n of D(a))!M.call(s,n)&&n!==t&&p(s,n,{get:()=>a[n],enumerable:!(e=y(a,n))||e.enumerable});return s};var b=s=>T(p({},"__esModule",{value:!0}),s);var N={};S(N,{default:()=>h});module.exports=b(N);var i=require("obsidian"),E={rootDir:"Projects",attributeName:"folder"},c=class extends i.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Folder Front Matter Settings"}),new i.Setting(t).setName("Root Directory").setDesc("Only files below this directory will get the front matter attribute.").addText(e=>e.setValue(this.plugin.settings.rootDir).onChange(async n=>{this.plugin.settings.rootDir=n.trim(),await this.plugin.saveSettings()})),new i.Setting(t).setName("Front Matter Attribute Name").setDesc("The key name to insert into the front matter (e.g. 'folder').").addText(e=>e.setValue(this.plugin.settings.attributeName).onChange(async n=>{this.plugin.settings.attributeName=n.trim()||"folder",await this.plugin.saveSettings()}))}},h=class extends i.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new c(this.app,this)),this.registerEvent(this.app.vault.on("create",t=>{t instanceof i.TFile&&this.handleFileEvent(t)})),this.registerEvent(this.app.vault.on("modify",t=>{t instanceof i.TFile&&this.handleFileEvent(t)})),this.registerEvent(this.app.vault.on("rename",(t,e)=>{t instanceof i.TFile&&this.handleFileEvent(t)})),this.addCommand({id:"update-all-folder-frontmatter",name:"Update All Folder Frontmatter",callback:async()=>{await this.updateAllRelevantFiles(),new i.Notice("All relevant files updated with folder front matter.")}}),this.app.workspace.onLayoutReady(()=>{this.updateAllRelevantFiles().catch(console.error)})}async loadSettings(){this.settings=Object.assign({},E,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async updateAllRelevantFiles(){let t=this.app.vault.getMarkdownFiles();for(let e of t)this.isInRootDir(e)&&await this.ensureFolderFrontMatter(e)}isInRootDir(t){let e=this.settings.rootDir.replace(/\\/g,"/"),n=t.path;return n.startsWith(e+"/")||n===e}async handleFileEvent(t){this.isMarkdownFile(t)&&this.isInRootDir(t)&&await this.ensureFolderFrontMatter(t)}isMarkdownFile(t){return t.extension==="md"}async ensureFolderFrontMatter(t){let e=this.getRelativeFolderPath(t),n=this.settings.attributeName,l=await this.app.vault.read(t),{content:r,changed:o}=this.updateFrontMatter(l,n,e);o&&await this.app.vault.modify(t,r)}getRelativeFolderPath(t){let e=this.settings.rootDir.replace(/\\/g,"/"),n=t.path.split("/");return n.pop(),n.length>0&&n[0]===e&&n.shift(),n.join("/")}updateFrontMatter(t,e,n){let l=/^---\n([\s\S]*?)\n---\n?/,r=!1,o=t,d=`${e}: "${n}"`,g=t.match(l);if(g){let v=g[1].split(`
`),u=!1,f=v.map(F=>{let[m,...w]=F.split(":");return m&&m.trim().toLowerCase()===e.toLowerCase()&&(u=!0,w.join(":").trim().replace(/^"|"$/g,"")!==n)?(r=!0,d):F});u||(f.push(d),r=!0),r&&(o=t.replace(l,`---
${f.join(`
`)}
---
`))}else o=`---
${d}
---
${t}`,r=!0;return{content:o,changed:r}}onunload(){}};
